{"version":3,"sources":["Components/tabela.js","Components/form.js","App.js","serviceWorker.js","index.js"],"names":["Tabela","users","this","props","length","map","user","index","nome","peso","altura","IMC","toFixed","key","onDoubleClick","td","handleDelete","Component","Form","state","handleInputChange","bind","event","preventDefault","handleSubmit","setState","alert","campo","floatRegExp","RegExp","stringValue","target","value","parseInt","NaoEhCampoNome","naoSaoApenasNumeros","match","console","log","className","onSubmit","htmlFor","type","name","id","onChange","PureComponent","App","useState","setUsers","novoUsuario","novoUsers","concat","parentNode","getAttribute","splice","newState","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e6f4b5fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './tabela.scss'\r\n// import { Container } from './styles';\r\n\r\nexport default class Tabela extends Component {\r\n\r\n    render() {\r\n        const { users } = this.props\r\n        \r\n        return (\r\n            <>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Nome</th>\r\n                            <th>Peso</th>\r\n                            <th>Altura</th>\r\n                            <th>IMC</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            users.length > 0 ? (\r\n                                users.map((user, index) => {\r\n                                    let { nome, peso, altura } = user\r\n                                    let IMC = (peso / (altura * altura)).toFixed(2)\r\n                                    if (IMC === \"NaN\") {\r\n                                        IMC = \"\"\r\n                                    }\r\n                                    return (\r\n                                        <tr key={index} index={index} onDoubleClick ={(td) => this.props.handleDelete(td)}>\r\n                                            <td>{nome}</td>\r\n                                            <td>{peso}</td>\r\n                                            <td>{altura}</td>\r\n                                            <td>{IMC}</td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n\r\n                            ) : (null)\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport './form.scss'\r\n\r\n// import { Container } from './styles';\r\n\r\nexport default class Form extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nome: \"\",\r\n            peso: \"\",\r\n            altura: \"\"\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this)\r\n    }\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        const { nome, peso, altura } = this.state\r\n        if (\r\n            (nome !== \"\" && nome !== null) &&\r\n            (peso !== \"\" && peso !== null) &&\r\n            (altura !== \"\" && altura !== null)\r\n        ) {\r\n            this.props.handleSubmit(this.state)\r\n            this.setState({\r\n                nome: \"\",\r\n                peso: \"\",\r\n                altura: \"\"\r\n            })\r\n        } else {\r\n            alert(\"Preencha todos os campos antes de calcular\")\r\n        }\r\n    }\r\n    handleInputChange(event, campo) {\r\n        const floatRegExp = new RegExp('^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$')\r\n        const stringValue = event.target.value\r\n        const value = parseInt(stringValue, 10)\r\n        const NaoEhCampoNome = campo !== \"nome\";\r\n        const naoSaoApenasNumeros = !stringValue.match(floatRegExp);\r\n        const NaoEhStringVazia = stringValue !== \"\";\r\n        const valorEhMenorQueZero = value < 0;\r\n        const condicoesDeRestricaoSaoVerdadeiras = (NaoEhCampoNome && naoSaoApenasNumeros && NaoEhStringVazia) || valorEhMenorQueZero;\r\n\r\n        if (condicoesDeRestricaoSaoVerdadeiras) {\r\n          alert(\"O campo deve conter apenas numeros positivos\");\r\n          event.target.value = \"\";\r\n          return;\r\n        }\r\n        switch (campo) {\r\n            case \"nome\":\r\n                this.setState({ nome: stringValue })\r\n                break;\r\n            case \"peso\":\r\n                this.setState({ peso: stringValue })\r\n                break;\r\n            case \"altura\":\r\n                this.setState({ altura: stringValue })\r\n                break;\r\n            default:\r\n                console.log(\"error on form.js inside handleInputChange function\");\r\n                break;\r\n        }\r\n    }\r\n    render() {\r\n      const { nome, peso, altura } = this.state\r\n      return (\r\n          <>\r\n              <div className=\"form-wrapper\">\r\n                <div className=\"novoUsuario-btn\">\r\n                    <p>\r\n                        Novo usu√°rio\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"inner-form-wrapper\">\r\n                    <form onSubmit={(event) => this.handleSubmit(event)}>\r\n                        <label htmlFor=\"nome\">Nome</label>\r\n                        <input type=\"text\" name=\"nome\" id=\"\" value={nome} onChange={(event) => this.handleInputChange(event,\"nome\")}/>\r\n                        <label htmlFor=\"peso\">Peso</label>\r\n                        <input type=\"text\" name=\"peso\" id=\"\" value={peso} onChange={(event) => this.handleInputChange(event,\"peso\")}/>\r\n                        <label htmlFor=\"altura\">Altura</label>\r\n                        <input type=\"text\" name=\"altura\" id=\"\" value={altura} onChange={(event) => this.handleInputChange(event, \"altura\")} />\r\n                          <div className=\"buttons\">\r\n                            <input type=\"submit\" name=\"\" id=\"btn-1\" value=\"Calcular\"/>\r\n                            <input type=\"submit\" name=\"\" id=\"btn-2\" value=\"Calcular\"/>\r\n                        </div>\r\n                    </form>\r\n                  </div>\r\n            </div>\r\n        </>\r\n    )\r\n  }\r\n}\r\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Tabela from './Components/tabela'\nimport Form from './Components/form'\n\nfunction App() {\n\n  const [users, setUsers] = useState([]);\n\n  function handleSubmit(novoUsuario) {\n    let novoUsers = users.concat(novoUsuario)\n    setUsers(novoUsers)\n  }\n  function handleDelete(td) {\n    let index = td.target.parentNode.getAttribute(\"index\")\n    users.splice(index, 1);\n    let newState = [...users]\n    setUsers(newState);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"bg-wrapper\">\n        <div className=\"bg\"></div>\n      </div>\n      <Form handleSubmit={handleSubmit} />\n      <div className=\"table\">\n        <Tabela users={users} handleDelete={handleDelete} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}